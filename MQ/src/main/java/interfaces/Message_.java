package interfaces;

import org.apache.activemq.command.ActiveMQTextMessage;

import javax.jms.JMSException;
import javax.jms.Message;
import javax.jms.TextMessage;


/**
 * {@link Message}
 *
 * Сообщения JMS состоят из следующих частей:
 * Заголовок - все сообщения поддерживают одинаковый набор полей заголовка. Поля заголовка содержат значения, используемые
 *      клиентами и поставщиками для идентификации и маршрутизации сообщений.
 * Свойства - каждое сообщение содержит встроенную функцию поддержки значений свойств, определенных приложением. Свойства
 *      обеспечивают эффективный механизм для поддержки определяемой приложением фильтрации сообщений.
 * Тело - API-интерфейс JMS определяет несколько типов тела сообщения, которые охватывают большинство используемых в
 *      настоящее время стилей обмена сообщениями.
 *
 * JMS API определяет пять типов тела сообщения:
 * Stream - тело сообщения объекта StreamMessage содержит поток примитивных значений на языке программирования Java
 *      («примитивы Java»). Заполняется и читается последовательно.
 * Map - тело сообщения объекта MapMessage содержит набор пар имя-значение, где имена являются объектами String, а
 *      значения являются примитивами Java. Записи могут быть доступны последовательно или случайным образом по имени.
 *      Порядок записей не определен.
 * Text - тело сообщения объекта TextMessage содержит объект java.lang.String. Этот тип сообщения может использоваться
 *      для транспортировки текстовых сообщений и сообщений XML.
 * Object - Тело сообщения объекта ObjectMessage содержит Сериализуемый Java-объект.
 * Bytes - тело сообщения объекта BytesMessage содержит поток неинтерпретированных байтов. Этот тип сообщения предназначен
 *      для буквального кодирования тела в соответствии с существующим форматом сообщения. Во многих случаях возможно
 *      использование одного из других типов телосложения, которые легче использовать. Хотя JMS API позволяет использовать
 *      свойства сообщений с байтовыми сообщениями, они обычно не используются, так как включение свойств может повлиять
 *      на формат.
 *
 * Поле заголовка JMSCorrelationID используется для связи одного сообщения с другим. Обычно оно связывает ответное сообщение
 *      с запрашивающим сообщением.
 * Свойства позволяют приложению с помощью селекторов сообщений выбирать или фильтровать провайдера JMS от его имени,
 *      используя критерии, специфичные для приложения.
 * Значения свойств могут быть boolean, byte, short, int, long, float, double, and String, и Метод setObjectProperty
 *      принимает обертки примитивов.
 *
 * JMS API резервирует префикс имени свойства JMSX для свойств, определенных JMS.
 *
 * JMSXGroupID и JMSXGroupSeq являются стандартными свойствами, которые клиенты должны использовать, если они хотят
 *      группировать сообщения.
 *
 *
 *
 * acknowledge() - Подтверждает получение всех сообщений в сессии этого сообщения.
 *
 *
 */
public class Message_ {

    public static void main(String[] args) throws JMSException {
        Message message = new ActiveMQTextMessage();
        message.acknowledge();
    }
}
